ALTER TABLE
  IF EXISTS users
ADD
  COLUMN role_id INT REFERENCES roles(id) DEFAULT 1;

UPDATE
  users
SET
  role_id = (
    SELECT
      id
    FROM
      roles
    WHERE
      name = 'user'
  );

ALTER TABLE
  users
ALTER COLUMN
  role_id DROP DEFAULT;

ALTER TABLE
  users
ALTER COLUMN
  role_id
SET
  NOT NULL;

    /*
    ex54
Uh, there's a couple of things we actually need to change here on the app.  Because if you think 
about it, uh, there's here a big issue actually, which is if you run this,  this is gonna straight up 
fail on your face.  And why is that?  Because we're trying to add a column which is not nullable.  
So it's mandatory into a table which has user.  So if you have run your seed script.  

ALTER TABLE IF EXISTS users
ADD
    COLUMN role_id BIGSERIAL REFERENCES roles(id);

This is going to fail because we have users.  If you don't have run your script beautiful, just run it.  
You're not going to have problems, but I'm going to take this opportunity to also teach you something  interesting, 
because if you're developing in a production application, you're going to probably change  columns like we're doing, but you cannot delete the data that you currently have.  
You cannot just delete all of the users to just add a column.  That's not an excuse that you can bring up.  
So I'm going to teach you how you can do this easily a couple of ways or not that easily because it's  still a little bit of a juggle.

First Method: One way to do this is to add a default value to the role_id column.  So it's going to be like this:
=======================================================================================================

ALTER TABLE IF EXISTS users
ADD
    COLUMN role_id BIGSERIAL REFERENCES roles(id) DEFAULT 1;

So the first thing is I'm going to change this to be an integer, because I'm going to add the default  value 
to be zero or not, not a zero, a one.  So this is going to be um, because if you think about once you run the 
last migration that we did to  add the rows, ideally the first row is going to be with ID one.  That's usually 
how it works, but we cannot stress the IDs generated by the database because first this  is a primary key, and 
it's auto generated, and there's a chance that it might not actually be the  ID with ID one, but still I'm just adding 
here the default has one.  However, if you run this this is going to completely work.  You can you can just stop here and run it.  
However, uh, I'm not satisfied with this solution because again, the default ID one might not be  the rule one.  
And I think most of the times it might be, but you cannot control the ID from your database.

second method:
====================================

ALTER TABLE IF EXISTS users
ADD
    COLUMN role_id BIGSERIAL REFERENCES roles(id) DEFAULT 1;

UPDATE users SET role_id = (SELECT id FROM roles WHERE name = 'user');

So I'm going to show you another way to do this.  And it starts again with this.  So what we need to do is let's 
update our users.  And these are actually also make sense if you want for example the default role to be a 
different role.  So again we're not relying on just one random number here.  Um so what we need to do is update 
all users and set the role ID to equal to the role which the slug  or the name Use it, which in this case we're 
going to do a subquery inside of here.  So let's select the ID from rows where the name is equal to user.  
So we know for sure that we're looking for the user for the role which the name user not just random  ID.  
So this is going to work.  Then I want to come back here to this table.  I'm going to alter this guy again.

ALTER TABLE IF EXISTS users
ADD
    COLUMN role_id BIGSERIAL REFERENCES roles(id) DEFAULT 1;

UPDATE users SET role_id = (SELECT id FROM roles WHERE name = 'user');

ALTER TABLE IF EXISTS users
ALTER COLUMN role_id DROP DEFAULT;

ALTER TABLE IF EXISTS users
ALTER COLUMN role_id SET NOT NULL;

But what I'm going to do is that I'm going to and I can just drop this.  If exists I can just do alter table.  
I have double alter here.  Oh no, I don't alter table users.  And what I'm going to do is alter the column row ID 
and set it to not null, just like so.  Also, I'm going to alter it again on a different statement because I want to drop the actually not  the set.
The sets.  I'm going to drop the defaults.  So here we have added it as defaults.  I don't want to have a default 
value.  I want it to be just.  I just has not null and nothing else.  So here I'm deleting the defaults I'm reverting back.  
And here I'm setting the not null.

*/